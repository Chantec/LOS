#include "paging.h"
#include "string.h"
#include "kheap.h"
#include "console.h"

#include "printk.h"

extern uint32_t placement_address;


//kernel's page dir
page_directory_t *kernel_directory;
//current ~
page_directory_t *current_directory;

//表示位图 frames是申请的表示位图 nframe：有几个页 页的个数
uint32_t *frames;
uint32_t nframe;
int cnt=0;
int cnt2=0;
//给位图置1
static void set_frame(uint32_t frame_addr)
{
    //printk("%d set_frame  frame_addr 0x%8x\n",++cnt2,frame_addr);
    //printk("set: frame_addr 0x%8x\n",frame_addr);
    uint32_t frame=frame_addr/0x1000;//bug 这个之前写的是frame/0x1000
    uint32_t idx=frame/32;
    uint32_t off=frame%32;

    //printk("debug before frame [idx] %d\n",frames[idx]);
    frames[idx]|=(0x1<<off);
    printk("%d set_frame  frame_addr 0x%8x   frames0 0x%8x\n idx off %d %d  \n frame \n",++cnt2,frame_addr,*frames,idx,off);
    //printk("debug after frame [idx] %d\n",frames[idx]);
    //printk("idx %d off %d\n",idx,off);

    // if(cnt++==2)
    // {
    //     while(1);
    // }
    

}
//给位图置0
static void clear_frame(uint32_t frame_addr)
{
    uint32_t frame=frame/0x1000;
    uint32_t idx=frame/32;
    uint32_t off=frame%32;
    frames[idx]&=~(0x1<<off);
}
//检查位图的值
static uint32_t test_frame(uint32_t frame_addr)
{
    uint32_t frame=frame/0x1000;
    uint32_t idx=frame/32;
    uint32_t off=frame%32;
    return (frames[idx]&(0x1<<off));
}
//找到第一个页框
static uint32_t first_frame()
{
    
    for(int i=0;i<nframe/32;++i)
    {
        if(frames[i]!=0xFFFFFFFF)
        {
            for(int j=0;j<32;++j)
            {
                uint32_t to_test=0x1<<j;
                // if((frames[i]&(0x1<<j))==0)

                if(!(frames[i]&to_test))
                {
                    printk("%d first_frame  i=%d j=%d frame0 %8x\n",++cnt2,i,j,*frames);

                    //printk("first_frame %d %d\n",i ,j);
                    return i*32+j;
                }
            }
        }
    }
}


//allocate and free
void alloc_frame(page_t *page,int is_kernel,int is_writeable)
{
    
    if(page->frame!=0)
    {
        printk_color(rc_black,rc_green,"page_not zero\n");
        return ;
        //这个frame正在使用呢
    }
    else
    {
        uint32_t idx=first_frame();
        printk("%d alloc_frame first_frame %d\n",++cnt2,idx);

        //printk("alloc_frame: idx:%d\n",idx);
        if(idx==(uint32_t)-1)//这个是啥意思
        {
            //PANIC("No free frames!");
        }
        set_frame(idx*0x1000);//我们使用了
        page->present =1;
        page->rw=(is_writeable)?1:0;
        page->user=(is_kernel)?0:1;
        page->frame=idx;
    }
    
}

//free
void free_frame(page_t *page)
{
    uint32_t frame=page->frame;
    if(frame==0)
    {
        return ;
    }
    else 
    {
        clear_frame(frame);
        page->frame=0x0;
    }
}
extern uint32_t kern_end;//liangtodo



void init_paging()
{
    placement_address=&kern_end;//bug 000
    
    //printk("init_paging placement %8x\n",placement_address);

    //设置物理内存的属性 这个我可以用multiboot协议 这里按照james的教程假定为16MB
    uint32_t mem_end_page=0x1000000;

    nframe=mem_end_page/0x1000;//有这么几个页
    frames=(uint32_t *)kmalloc(nframe/32);//分配空间用来放位图

    //printk("debug frames first addr %8x\n",frames);


    memset(frames,0,sizeof (frames));//

    //开始制作 page directory

    kernel_directory=(page_directory_t *)kmalloc_a(sizeof(page_directory_t));
    memset(kernel_directory,0,sizeof (page_directory_t));
    current_directory=kernel_directory;

    //把内核使用到的地址 做一个 相等映射
    uint32_t i=0;
    
    while(i<placement_address)
    {
        cnt2=0;
        printk("%d init_paging i:0x%8x\n",++cnt2,i);
        alloc_frame(get_page(i,1,kernel_directory),0,0);
        i+=0x1000;
    }

    register_interrupt_handler(14,&page_fault);

    //enable paging
    switch_page_directory(kernel_directory);

}

void switch_page_directory(page_directory_t *dir)
{
    current_directory=dir;

    //cr3->page_dir
    asm volatile("mov %0,%%cr3"::"r"(&(dir->tablesPhysical)));
    
    //问题 这里不用一直开启把
    //cr0 分页开启
    uint32_t cr0;
    asm volatile("mov %%cr0,%0":"=r"(cr0));
    
    cr0|=0x80000000;//enable paging
    //return ;
    
    asm volatile("mov %0,%%cr0"::"r"(cr0));
}

//make=1 如果不存在就创建他
page_t *get_page(uint32_t address,int make,page_directory_t *dir)
{
    
    address/=0x1000;

    uint32_t table_idx =address/1024;//得到这个page在table中的索引

    if(dir->tables[table_idx])
    {
        return &(dir->tables[table_idx]->pages[address%1024]);
    }
    else if(make)
    {
        uint32_t tmp;
        dir->tables[table_idx]=(page_table_t *)kmalloc_ap(sizeof(page_table_t),&tmp);//tmp physical memory
        memset(dir->tables[table_idx],0,0x1000);
        dir->tablesPhysical[table_idx]=tmp|0x7;//111 usermode write present
        printk("%d get_page \n",++cnt2);
        return &(dir->tables[table_idx]->pages[address%1024]);
    }
    else 
    {
        return 0;
    }
}

void page_fault(registers_t regs)
{
    uint32_t faulting_addr;
    //cr2->faulting_addr
    asm volatile ("mov %%cr2,%0":"=r"(faulting_addr));
    
    uint32_t err_code=regs.err_code;
    int present=!(err_code&0x1);
    int rw=err_code&0x2;
    int us=err_code&0x4;
    int reserved =err_code&0x8;
    int id=err_code&0x10;

    // Bit 0
    //     If set, the fault was not because the page wasn't present. If unset, the page wasn't present.
    // Bit 1
    //     If set, the operation that caused the fault was a write, else it was a read.
    // Bit 2
    //     If set, the processor was running in user-mode when it was interrupted. Else, it was running in kernel-mode.
    // Bit 3
    //     If set, the fault was caused by reserved bits being overwritten.
    // Bit 4
    //     If set, the fault occurred during an instruction fetch.

    console_puts("Page fault!( ");
    if (present) {console_puts("present ");}
    if (rw) {console_puts("read-only ");}
    if (us) {console_puts("user-mode ");}
    if (reserved) {console_puts("reserved ");}
    console_puts(") at 0x");
    console_put_hex(faulting_addr,rc_black,rc_white);
    console_puts("\n");
    //PANIC("Page fault");

    while(1) ;
}
